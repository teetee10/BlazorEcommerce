@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else{
<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
   {
       <li class="oi-media-pause my-3">
           <div class="media-img-wrapper mr-2">
               <a href="product/@product.Id">
                   <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
               </a>
           </div>
           <div class="media-body">
               <a href="product/@product.Id">
                   <h4 class="mb-0">@product.Title</h4>
                   </a>
                   <p>@product.Description</p>
                   <h5 class="price">
                        @GetPriceText(product)
                   </h5>
           </div>
       </li>
   }
</ul>
}

@code {

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
        //await ProductService.GetProducts();
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

        private string GetPriceText(Product product)
    {
        //Gets product variant From a product
        var variants = product.Variants;
        //Checks if Variant exist
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        //Checks if we have only 1 variant and returns the price of that variant
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        //Checks if more than 1 Variant exists and returns the mininmum price of every/all Variant
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
